//globals
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer Light
{
 float4 ambientColor;
 float4 diffuseColor;
 float3 lightDirection;
 float specularPower;
 float4 specularColor;
}

struct PixelInput
{
  float4 position : SV_POSITION;
  float2 tex : TEXCOORD0;
  float3 normal : NORMAL;
  float3 viewDirection : TEXCOORD1;
}

float4 defualtPixelShader(PixelInput input) :SV_TARGET
{
   float4 textureColor;
   float3 lightDir;
   float lightIntensity;
   float4 color;
   float3 reflection;
   float4 specular;

   //Sample the pixel color from the texture using the sampler at this texture coordinate
   textureColor = shaderTexture.Sample(SampleType,input.tex);

   //Set the defulat output color to the ambient light value for all pixels.
   color = ambientColor;

   //init the specular color
   specular = float4(0.0f,0.0f,0.0f,0.0f);

   //Invert the light direction for calculations
   lightDir = -lightDirection;

   //Calculate the amount of light on this pixel.
   lightIntensity = saturate(dot(input.normal,lightDir));

   if(light Intensity > 0.0f)
   {
     //determin the final diffuse color based on the diffuse color and the amount of light
	 color += (diffuseColor * lightIntensity);

	 //Saturate the ambient and diffuse color
	 color = saturate(color);

	 //Calcualte the reflection vector based on the light intensity,normal vector and light direction
	 reflection = normalize(2*lightIntensity*input.normal - lightDir);

	 //Determine the amount of specular light based on the relfection vector,viewing direction and specular power.
	 specular = pow(saturate(dot(reflection,input.viewDirection)),specularPower);
   }

   //Multiply the texture and the final diffuse color to get the final pixel color
   color = color * textureColor;

   //Add the specular componenet last to the output color

   return color;
}